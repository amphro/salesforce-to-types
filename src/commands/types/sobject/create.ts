import { flags, SfdxCommand } from '@salesforce/command';
import { fs, Messages } from '@salesforce/core';
import { AnyJson } from '@salesforce/ts-types';
import { some } from 'lodash';
import { join } from 'path';

// Initialize Messages with the current plugin directory
Messages.importMessagesDirectory(__dirname);

// Load the specific messages for this file. Messages from @salesforce/command, @salesforce/core,
// or any library that is using the messages framework can also be loaded this way.
const messages = Messages.loadMessages('salesforce-to-types', 'sobject');

const header = `
/**
 * DO NOT MODIFY THIS FILE!
 *
 * This file is generated by the salesforce-to-types plugin and
 * may be regenerated in the future. It is recommended to make
 * changes to that plugin then regenerate these files.
 *
 */
`;

const sobject = `${header}
export type ID = string;

export interface SObject {
  Id: ID;
  Name: string;
}
`;

export default class Org extends SfdxCommand {

  public static description = messages.getMessage('commandDescription');

  public static examples = [
    '$ sfdx types:sobject:create --sobject Account',
    '$ sfdx types:sobject:create --sobject MyCustomObject__c --directory types/ --targetusername myOrg@example.com'
  ];

  protected static flagsConfig = {
    // flag with a value (-n, --name=VALUE)
    outputdir: flags.directory({
      char: 'o',
      description: messages.getMessage('directoryFlagDescription'),
      default: './src/types'
    }),
    sobject: flags.string({
      char: 's',
      description: messages.getMessage('sobjectFlagDescription'),
      required: true
    })
  };

  // Comment this out if your command does not require an org username
  protected static requiresUsername = true;

  private createdFiles = [];

  public async run(): Promise<AnyJson> {
    await this.createBaseSObjectType();
    await this.generateSObjectType();

    if (this.createdFiles.length > 0) {
      this.ux.styledHeader('Create types');
      this.ux.table(this.createdFiles.map(filePath => ({ file: filePath })), {
        columns: [{key: 'file', label: 'Output file path'}]
      });
    } else {
      this.ux.log('No types created.');
    }

    // Return an object to be displayed with --json
    return { files: this.createdFiles };
  }

  private async createBaseSObjectType() {
    const dir = await fs.readdir(this.flags.outputdir);
    if (!some(dir, fileName => fileName === 'sobject.ts')) {
      const filePath = join(this.flags.outputdir, 'sobject.ts');
      await fs.writeFile(filePath, sobject);
      this.createdFiles.push(filePath);
    }
  }

  private async generateSObjectType() {
    const conn = this.org.getConnection();
    const objectName: string = this.flags.sobject;
    const describe = await conn.describe(objectName);
    const pascalObjectName = objectName.replace('__c', '').replace('_', '');

    let typeContents = `${header}\nimport { SObject } from \'./sobject\';`;

    typeContents += `\n\nexport interface ${pascalObjectName} extends SObject {`;

    describe.fields.forEach(field => {
      let typeName;
      switch (field['type']) {
        case 'boolean':
          typeName = 'boolean';
          break;
        case 'int':
        case 'double':
          typeName = 'number';
          break;
        default:
          typeName = 'string';
      }
      typeContents += `\n  ${field['name']}: ${typeName};`;
    });
    typeContents += '\n}\n';

    const filePath = join(this.flags.outputdir, `${pascalObjectName.toLowerCase()}.ts`);
    await fs.writeFile(filePath, typeContents);
    this.createdFiles.push(filePath);
  }
}
